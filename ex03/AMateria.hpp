/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   AMateria.hpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mlarra <mlarra@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/10/20 11:41:23 by mlarra            #+#    #+#             */
/*   Updated: 2022/10/20 12:53:17 by mlarra           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef AMATERIA_HPP
# define AMATERIA_HPP

# include <iostream>
# include "ICharacter.hpp"

// Интерфейсов не существует в C++98 (даже в C++20). 
// Однако чистые абстрактные классы обычно называют интерфейсами. 
// Таким образом, в этом последнем упражнении давайте попробуем реализовать интерфейсы, 
// чтобы убедиться, что вы получили этот модуль.

// Завершите определение следующего класса AMateria и реализуйте необходимые функции-члены.

// Реализуйте конкретные классы Materias Ice и Cure. 
// Используйте их имена в нижнем регистре («лед» для льда, «лечение» для лечения), 
// чтобы установить их типы. Конечно, их функция-член clone() вернет новый экземпляр того же типа 
// (т. е. если вы клонируете Ледяную Материю, вы получите новую Ледяную Материю).

// Функция члена use(ICharacter&) будет отображать:

// • Лед: "* стреляет ледяной стрелой в <имя> *"
// • Лечение: «* лечит раны <имя> *»
// <имя> — это имя Персонажа, переданное в качестве параметра. 
// Не печатайте угловые скобки (< и >).

// При назначении Материи другой, копирование типа не делает смысл.

// Напишите конкретный класс Character, который будет реализовывать следующий интерфейс:

// В инвентаре Персонажа 4 слота, что означает максимум 4 Материи. 
// Инвентарь пуст при строительстве. Они экипируют Материи в первый свободный слот, 
// который они найдут. То есть в таком порядке: от слота 0 до слота 3. 
// В случае, если они попытаются добавить Материю в полный инвентарь, 
// или использовать/снять несуществующую Материю, ничего не делать 
// (но тем не менее, баги запрещены). Функция-член unequip() НЕ ДОЛЖНА удалять Материю!

// Распоряжайтесь Материями, оставленными вашим персонажем на полу, как вам угодно. 
// Сохраняйте адреса перед вызовом unequip() или чего-то еще, но не забывайте, 
// что вы должны избегать утечек памяти.

// Функция-член use(int, ICharacter&) должна будет использовать Материю в слоте [idx] 
// и передать целевой параметр функции AMateria::use.

// Инвентарь вашего персонажа сможет поддерживать любой тип AMатерия.

// У вашего Персонажа должен быть конструктор, принимающий его имя в качестве параметра. 
// Любая копия (использующая конструктор копирования или оператор присваивания копии) 
// персонажа должна быть глубокой. Во время копирования Материи Персонажа должны быть удалены, 
// прежде чем новые будут добавлены в его инвентарь. 
// Разумеется, Материи должны быть удалены при уничтожении Персонажа.

// Напишите конкретный класс MateriaSource, который будет реализовывать следующий интерфейс:

// • LearnMateria(AMateria*) Копирует Материю, переданную в качестве параметра, 
// и сохраняет ее в памяти, чтобы ее можно было клонировать позже. Как и Персонаж, 
// Источник Материи может знать не более 4 Материй. Они не обязательно уникальны.
// • createMateria(std::string const &) Возвращает новую Материю. 
// Последний является копией Материи, ранее изученной Материей-Источником, 
// тип которой равен типу, переданному в качестве параметра. 
// Возвращает 0, если тип неизвестен.

// В двух словах, ваш MateriaSource должен уметь изучать «шаблоны» Материй, 
// чтобы создавать их по мере необходимости. Затем вы сможете сгенерировать новую Материю, 
// используя только строку, идентифицирующую ее тип.

class AMateria
{
protected:
	std::string	materiaType;
public:
	AMateria();
	AMateria	&operator=(const AMateria &);
	AMateria(const AMateria &);
	virtual ~AMateria();

	AMateria(std::string const & type);
	// [...]
	std::string const & getType() const; //Returns the materia type
	virtual AMateria* clone() const = 0;
	virtual void use(ICharacter& target);
};

#endif